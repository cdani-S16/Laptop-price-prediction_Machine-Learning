{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project : Price Prediction of Laptops"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Name: Mabin Mariam Joseph\n",
    "\n",
    "Group members: Chris Mathew Dani, Mabin Joseph"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Project Description: In this project, we scan through the best ecommerce websites and extract the list of all laptop products available in the market. The goal is to create a logistic regression algorithm that predicts the price of laptop, given the specifications with the highest accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 691,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.feature_extraction import DictVectorizer\n",
    "from sklearn import preprocessing\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from sklearn.cross_validation import cross_val_score\n",
    "from sklearn import linear_model\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "from sklearn.dummy import DummyRegressor\n",
    "from sklearn import cluster\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 692,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(Number of data instances,Number of features)\n",
      "(748, 16)\n",
      "Index(['Retail Price', 'Pro Speed', 'HDD', 'RAM', 'Screen Size', 'Weight',\n",
      "       'Ratings', 'OS=Chrome OS', 'OS=Mac OS', 'OS=Windows', 'OS=Windows 10',\n",
      "       'OS=Windows 7', 'OS=Windows 8.1', 'OS=Windows7', 'Touch Screen=No',\n",
      "       'Touch Screen=Yes'],\n",
      "      dtype='object')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Retail Price</th>\n",
       "      <th>Pro Speed</th>\n",
       "      <th>HDD</th>\n",
       "      <th>RAM</th>\n",
       "      <th>Screen Size</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Ratings</th>\n",
       "      <th>OS=Chrome OS</th>\n",
       "      <th>OS=Mac OS</th>\n",
       "      <th>OS=Windows</th>\n",
       "      <th>OS=Windows 10</th>\n",
       "      <th>OS=Windows 7</th>\n",
       "      <th>OS=Windows 8.1</th>\n",
       "      <th>OS=Windows7</th>\n",
       "      <th>Touch Screen=No</th>\n",
       "      <th>Touch Screen=Yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>299.99</td>\n",
       "      <td>2.1</td>\n",
       "      <td>1000</td>\n",
       "      <td>4</td>\n",
       "      <td>15.6</td>\n",
       "      <td>4.85</td>\n",
       "      <td>4.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>349.99</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "      <td>15.6</td>\n",
       "      <td>4.72</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>179.99</td>\n",
       "      <td>1.6</td>\n",
       "      <td>500</td>\n",
       "      <td>4</td>\n",
       "      <td>15.6</td>\n",
       "      <td>4.85</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>999.99</td>\n",
       "      <td>1.6</td>\n",
       "      <td>128</td>\n",
       "      <td>8</td>\n",
       "      <td>13.3</td>\n",
       "      <td>2.96</td>\n",
       "      <td>4.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>249.99</td>\n",
       "      <td>1.6</td>\n",
       "      <td>500</td>\n",
       "      <td>4</td>\n",
       "      <td>15.6</td>\n",
       "      <td>4.41</td>\n",
       "      <td>4.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Retail Price  Pro Speed   HDD  RAM Screen Size  Weight  Ratings  \\\n",
       "0  299.99        2.1        1000  4    15.6        4.85    4.3       \n",
       "1  349.99        2.4        1000  6    15.6        4.72    4.2       \n",
       "2  179.99        1.6        500   4    15.6        4.85    4.0       \n",
       "3  999.99        1.6        128   8    13.3        2.96    4.8       \n",
       "4  249.99        1.6        500   4    15.6        4.41    4.1       \n",
       "\n",
       "   OS=Chrome OS  OS=Mac OS  OS=Windows  OS=Windows 10  OS=Windows 7  \\\n",
       "0  0.0           0.0        0.0         1.0            0.0            \n",
       "1  0.0           0.0        0.0         1.0            0.0            \n",
       "2  0.0           0.0        0.0         1.0            0.0            \n",
       "3  0.0           1.0        0.0         0.0            0.0            \n",
       "4  0.0           0.0        0.0         1.0            0.0            \n",
       "\n",
       "   OS=Windows 8.1  OS=Windows7  Touch Screen=No  Touch Screen=Yes  \n",
       "0  0.0             0.0          1.0              0.0               \n",
       "1  0.0             0.0          0.0              1.0               \n",
       "2  0.0             0.0          1.0              0.0               \n",
       "3  0.0             0.0          1.0              0.0               \n",
       "4  0.0             0.0          1.0              0.0               "
      ]
     },
     "execution_count": 692,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import data\n",
    "inputdata_df = pd.read_csv(\"laptop_list.csv\")\n",
    "\n",
    "#Data preprocessing\n",
    "def data_preprocess(data):\n",
    "    \n",
    "    columns = list(data.columns)\n",
    "    strings = columns[0:9]\n",
    "            \n",
    "    for col in strings:\n",
    "        data[col] = data[col].fillna('type 0')\n",
    "    return data\n",
    "\n",
    "#Encode categorical values in data\n",
    "def one_hot_dataframe(data, cols, replace=False):\n",
    "    vec = DictVectorizer()\n",
    "    mkdict = lambda row: dict((col, row[col]) for col in cols)\n",
    "    vecData = pd.DataFrame(vec.fit_transform(data[cols].apply(mkdict, axis=1)).toarray())\n",
    "    vecData.columns = vec.get_feature_names()\n",
    "    vecData.index = data.index\n",
    "    if replace is True:\n",
    "        data = data.drop(cols, axis=1)\n",
    "        data = data.join(vecData)\n",
    "    return (data)\n",
    "\n",
    "preprocessed = data_preprocess(inputdata_df)\n",
    "\n",
    "df = one_hot_dataframe(preprocessed, ['Touch Screen','OS'], replace=True)\n",
    "print(\"(Number of data instances,Number of features)\")\n",
    "print(df.shape)\n",
    "print(df.columns)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 693,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(748, 6)\n",
      "(748, 16)\n",
      "(748, 15)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admin\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:2: FutureWarning: convert_objects is deprecated.  Use the data-type specific converters pd.to_datetime, pd.to_timedelta and pd.to_numeric.\n",
      "  from ipykernel import kernelapp as app\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pro Speed</th>\n",
       "      <th>HDD</th>\n",
       "      <th>RAM</th>\n",
       "      <th>Screen Size</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Ratings</th>\n",
       "      <th>OS=Chrome OS</th>\n",
       "      <th>OS=Mac OS</th>\n",
       "      <th>OS=Windows</th>\n",
       "      <th>OS=Windows 10</th>\n",
       "      <th>OS=Windows 7</th>\n",
       "      <th>OS=Windows 8.1</th>\n",
       "      <th>OS=Windows7</th>\n",
       "      <th>Touch Screen=No</th>\n",
       "      <th>Touch Screen=Yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.1</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>15.6</td>\n",
       "      <td>4.85</td>\n",
       "      <td>4.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.4</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>6</td>\n",
       "      <td>15.6</td>\n",
       "      <td>4.72</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.6</td>\n",
       "      <td>500.0</td>\n",
       "      <td>4</td>\n",
       "      <td>15.6</td>\n",
       "      <td>4.85</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.6</td>\n",
       "      <td>128.0</td>\n",
       "      <td>8</td>\n",
       "      <td>13.3</td>\n",
       "      <td>2.96</td>\n",
       "      <td>4.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.6</td>\n",
       "      <td>500.0</td>\n",
       "      <td>4</td>\n",
       "      <td>15.6</td>\n",
       "      <td>4.41</td>\n",
       "      <td>4.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pro Speed     HDD  RAM  Screen Size  Weight  Ratings  OS=Chrome OS  \\\n",
       "0  2.1        1000.0  4    15.6         4.85    4.3      0.0            \n",
       "1  2.4        1000.0  6    15.6         4.72    4.2      0.0            \n",
       "2  1.6        500.0   4    15.6         4.85    4.0      0.0            \n",
       "3  1.6        128.0   8    13.3         2.96    4.8      0.0            \n",
       "4  1.6        500.0   4    15.6         4.41    4.1      0.0            \n",
       "\n",
       "   OS=Mac OS  OS=Windows  OS=Windows 10  OS=Windows 7  OS=Windows 8.1  \\\n",
       "0  0.0        0.0         1.0            0.0           0.0              \n",
       "1  0.0        0.0         1.0            0.0           0.0              \n",
       "2  0.0        0.0         1.0            0.0           0.0              \n",
       "3  1.0        0.0         0.0            0.0           0.0              \n",
       "4  0.0        0.0         1.0            0.0           0.0              \n",
       "\n",
       "   OS=Windows7  Touch Screen=No  Touch Screen=Yes  \n",
       "0  0.0          1.0              0.0               \n",
       "1  0.0          0.0              1.0               \n",
       "2  0.0          1.0              0.0               \n",
       "3  0.0          1.0              0.0               \n",
       "4  0.0          1.0              0.0               "
      ]
     },
     "execution_count": 693,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def type_conversion(cols):\n",
    "    df[cols] = df[cols].convert_objects(convert_numeric=True)\n",
    "    df[cols].fillna(0,inplace=True)\n",
    "\n",
    "type_conversion('HDD')\n",
    "type_conversion('RAM')\n",
    "type_conversion('Screen Size')\n",
    " \n",
    "#separate data from target attributes\n",
    "X = df[['Pro Speed', 'HDD', 'RAM', 'Screen Size', 'Weight', 'Ratings','OS=Chrome OS', 'OS=Mac OS', 'OS=Windows', 'OS=Windows 10', 'OS=Windows 7', 'OS=Windows 8.1', 'OS=Windows7', 'Touch Screen=No', 'Touch Screen=Yes']]\n",
    "y = df[['Retail Price']]\n",
    "\n",
    "#Standardize the continuous features (vectorized features are excluded)\n",
    "standard_X1 = preprocessing.scale(df[['Pro Speed', 'HDD', 'RAM', 'Screen Size', 'Weight', 'Ratings']])\n",
    "standard_df = pd.DataFrame(standard_X1,columns=['Pro Speed', 'RAM', 'Screen Size', 'Weight', 'Ratings',\n",
    "       'HDD'])\n",
    "standard_df.head()\n",
    "\n",
    "print(standard_X1.shape)\n",
    "print(df.shape)\n",
    "XFinal = pd.merge(X,standard_df,how= \"left\")\n",
    "print(XFinal.shape)\n",
    "XFinal.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Performance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dummy Regressor is used as the baseline for performance.This regressor is useful as a simple baseline to compare with other (real) regressors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 694,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DUMMY REGRESSOR\n",
      "---------------\n",
      "Score:  -0.000939998306439\n"
     ]
    }
   ],
   "source": [
    "print('DUMMY REGRESSOR')\n",
    "print('---------------')\n",
    "clf0 = DummyRegressor()\n",
    "clf0.fit(x_train,y_train)\n",
    "predicted0 = clf0.predict(x_test)\n",
    "print(\"Score: \",clf0.score(x_test,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 695,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LINEAR REGRESSION\n",
      "-----------------\n",
      "Model Score :  0.69239679433\n",
      "\n",
      "Coefficients of features\n",
      "-------------------------\n",
      "Pro Speed  : 133.036795865\n",
      "HDD  : 0.0826243781153\n",
      "RAM  : 72.2821616511\n",
      "Screen Size  : -15.567903815\n",
      "Weight  : 10.0450888414\n",
      "Ratings  : -0.782088105318\n",
      "OS=Chrome OS  : -217.576142372\n",
      "OS=Mac OS  : 697.888720879\n",
      "OS=Windows  : -1.13686837722e-13\n",
      "OS=Windows 10  : -70.3379752417\n",
      "OS=Windows 7  : -384.520733203\n",
      "OS=Windows 8.1  : -25.4538700615\n",
      "OS=Windows7  : 0.0\n",
      "Touch Screen=No  : -34.8261323821\n",
      "Touch Screen=Yes  : 34.8261323821\n",
      "\n",
      "Cross Value Scores:  [ 0.63423916  0.5943895   0.57984911  0.57076086  0.67179417  0.66636439\n",
      "  0.58865638  0.81590963  0.68911555  0.7510896 ]\n",
      "\n",
      "Cross Value Scores with r2 scoring:  [ 0.63423916  0.5943895   0.57984911  0.57076086  0.67179417  0.66636439\n",
      "  0.58865638  0.81590963  0.68911555  0.7510896 ]\n",
      "\n",
      "Cross Value Scores with neg_mean_absolute_error scoring:  [-232.43275356 -311.13852406 -287.35895768 -318.12877168 -286.85815731\n",
      " -327.81653542 -376.00783246 -349.08212812 -335.70947584 -264.57027027]\n",
      "\n",
      "Cross Value Scores with neg_mean_squared_error scoring:  [ -84169.73732908 -193012.30301013 -129109.76937595 -213988.97966255\n",
      " -149899.20538385 -199577.3100893  -326592.01257129 -229924.72337535\n",
      " -265084.10617469 -112426.87808124]\n",
      "\n",
      "Cross Value Scores with neg_median_absolute_error scoring:  [-232.20932405 -249.00984863 -255.50915544 -245.22029937 -243.18471594\n",
      " -244.14171481 -248.58830913 -274.96870436 -279.72830558 -184.18874877]\n"
     ]
    }
   ],
   "source": [
    "print('LINEAR REGRESSION')\n",
    "print('-----------------')\n",
    "clf1 = linear_model.LinearRegression()\n",
    "clf1.fit(x_train,y_train)\n",
    "predicted1 = clf1.predict(x_test)\n",
    "print(\"Model Score : \",clf1.score(x_test,y_test))\n",
    "print(\"\\nCoefficients of features\")\n",
    "print(\"-------------------------\")\n",
    "for i in range (15):\n",
    "    print(XFinal.columns[i],\" :\",clf1.coef_[0,i])\n",
    "    \n",
    "print(\"\\nCross Value Scores: \",cross_val_score(clf1, XFinal, y,cv=10)) \n",
    "print(\"\\nCross Value Scores with r2 scoring: \",cross_val_score(clf1, XFinal, y,cv=10,scoring='r2')) \n",
    "print(\"\\nCross Value Scores with neg_mean_absolute_error scoring: \",cross_val_score(clf1, XFinal, y,cv=10,scoring='neg_mean_absolute_error')) \n",
    "print(\"\\nCross Value Scores with neg_mean_squared_error scoring: \",cross_val_score(clf1, XFinal, y,cv=10,scoring='neg_mean_squared_error')) \n",
    "print(\"\\nCross Value Scores with neg_median_absolute_error scoring: \",cross_val_score(clf1, XFinal, y,cv=10,scoring='neg_median_absolute_error')) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 696,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LASSO REGRESSION\n",
      "----------------\n",
      "Model Score :  0.691078586489\n",
      "\n",
      "Coefficients of features\n",
      "-------------------------\n",
      "Pro Speed  : 127.377973116\n",
      "HDD  : 0.0881854176845\n",
      "RAM  : 72.653838155\n",
      "Screen Size  : -15.5672071016\n",
      "Weight  : 9.50751672179\n",
      "Ratings  : 0.0\n",
      "OS=Chrome OS  : -135.502196082\n",
      "OS=Mac OS  : 736.539931395\n",
      "OS=Windows  : 0.0\n",
      "OS=Windows 10  : 0.0\n",
      "OS=Windows 7  : -305.267356598\n",
      "OS=Windows 8.1  : 0.0\n",
      "OS=Windows7  : 0.0\n",
      "Touch Screen=No  : -58.2647355303\n",
      "Touch Screen=Yes  : 0.0\n",
      "\n",
      "Cross Value Scores:  [ 0.65985963  0.58212786  0.5795762   0.57229613  0.67182366  0.66612067\n",
      "  0.59439594  0.81581545  0.687221    0.74972697]\n",
      "\n",
      "Cross Value Scores with r2 scoring:  [ 0.65985963  0.58212786  0.5795762   0.57229613  0.67182366  0.66612067\n",
      "  0.59439594  0.81581545  0.687221    0.74972697]\n",
      "\n",
      "Cross Value Scores with neg_mean_absolute_error scoring:  [-224.4402535  -319.01367767 -288.50509566 -317.3591731  -286.99325343\n",
      " -329.09055789 -370.98171876 -348.16915511 -337.89498984 -264.93375097]\n",
      "\n",
      "Cross Value Scores with neg_mean_squared_error scoring:  [ -78273.89553514 -198847.07698327 -129193.63375588 -213223.60063369\n",
      " -149885.73763097 -199723.0952317  -322035.00513631 -230042.35384552\n",
      " -266699.5438581  -113042.34365646]\n",
      "\n",
      "Cross Value Scores with neg_median_absolute_error scoring:  [-217.24347716 -279.77133913 -244.58709421 -247.68534426 -243.42720546\n",
      " -246.80279369 -240.52725762 -273.21477751 -275.25580739 -177.39950746]\n"
     ]
    }
   ],
   "source": [
    "print('LASSO REGRESSION')\n",
    "print('----------------')\n",
    "clf2 = linear_model.Lasso()\n",
    "clf2.fit(x_train,y_train)\n",
    "predicted2 = clf2.predict(x_test)\n",
    "print(\"Model Score : \",clf2.score(x_test,y_test))\n",
    "print(\"\\nCoefficients of features\")\n",
    "print(\"-------------------------\")\n",
    "for i in range (15): \n",
    "    print(XFinal.columns[i],\" :\",clf2.coef_[i])\n",
    "    \n",
    "print(\"\\nCross Value Scores: \",cross_val_score(clf2, XFinal, y,cv=10)) \n",
    "print(\"\\nCross Value Scores with r2 scoring: \",cross_val_score(clf2, XFinal, y,cv=10,scoring='r2')) \n",
    "print(\"\\nCross Value Scores with neg_mean_absolute_error scoring: \",cross_val_score(clf2, XFinal, y,cv=10,scoring='neg_mean_absolute_error')) \n",
    "print(\"\\nCross Value Scores with neg_mean_squared_error scoring: \",cross_val_score(clf2, XFinal, y,cv=10,scoring='neg_mean_squared_error')) \n",
    "print(\"\\nCross Value Scores with neg_median_absolute_error scoring: \",cross_val_score(clf2, XFinal, y,cv=10,scoring='neg_median_absolute_error')) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 697,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RIDGE REGRESSION\n",
      "----------------\n",
      "Model Score :  0.691054038059\n",
      "\n",
      "Coefficients of features\n",
      "-------------------------\n",
      "Pro Speed  : 131.592188041\n",
      "HDD  : 0.0864790850347\n",
      "RAM  : 72.6251607175\n",
      "Screen Size  : -16.5846686458\n",
      "Weight  : 9.13603466882\n",
      "Ratings  : 1.17685282815\n",
      "OS=Chrome OS  : -195.996321125\n",
      "OS=Mac OS  : 624.146735424\n",
      "OS=Windows  : 0.0\n",
      "OS=Windows 10  : -56.5178265851\n",
      "OS=Windows 7  : -358.848682089\n",
      "OS=Windows 8.1  : -12.7839056252\n",
      "OS=Windows7  : 0.0\n",
      "Touch Screen=No  : -31.7455918059\n",
      "Touch Screen=Yes  : 31.7455918059\n",
      "\n",
      "Cross Value Scores:  [ 0.6619781   0.58511792  0.57975809  0.57152631  0.67118733  0.66579019\n",
      "  0.58941181  0.81593531  0.68933221  0.7508536 ]\n",
      "\n",
      "Cross Value Scores with r2 scoring:  [ 0.6619781   0.58511792  0.57975809  0.57152631  0.67118733  0.66579019\n",
      "  0.58941181  0.81593531  0.68933221  0.7508536 ]\n",
      "\n",
      "Cross Value Scores with neg_mean_absolute_error scoring:  [-224.15932504 -316.9190867  -288.19189669 -317.91983583 -287.08442716\n",
      " -327.97824685 -375.34503119 -348.61225358 -335.8093186  -264.37648463]\n",
      "\n",
      "Cross Value Scores with neg_mean_squared_error scoring:  [ -77786.38736043 -197424.24143232 -129137.73891551 -213607.37828033\n",
      " -150176.36435173 -199920.78779349 -325992.22779489 -229892.64932468\n",
      " -264899.36308327 -112533.47281109]\n",
      "\n",
      "Cross Value Scores with neg_median_absolute_error scoring:  [-219.59294312 -282.02396255 -255.82143822 -246.64204791 -243.53606024\n",
      " -245.77570476 -247.95301119 -273.08877719 -278.51335146 -180.00189956]\n"
     ]
    }
   ],
   "source": [
    "print('RIDGE REGRESSION')\n",
    "print('----------------')\n",
    "clf3 = linear_model.Ridge()\n",
    "clf3.fit(x_train,y_train)\n",
    "predicted3 = clf3.predict(x_test)\n",
    "print(\"Model Score : \",clf3.score(x_test,y_test))\n",
    "print(\"\\nCoefficients of features\")\n",
    "print(\"-------------------------\")\n",
    "for i in range (15): \n",
    "    print(XFinal.columns[i],\" :\",clf3.coef_[0,i])\n",
    "    \n",
    "print(\"\\nCross Value Scores: \",cross_val_score(clf3, XFinal, y,cv=10)) \n",
    "print(\"\\nCross Value Scores with r2 scoring: \",cross_val_score(clf3, XFinal, y,cv=10,scoring='r2')) \n",
    "print(\"\\nCross Value Scores with neg_mean_absolute_error scoring: \",cross_val_score(clf3, XFinal, y,cv=10,scoring='neg_mean_absolute_error')) \n",
    "print(\"\\nCross Value Scores with neg_mean_squared_error scoring: \",cross_val_score(clf3, XFinal, y,cv=10,scoring='neg_mean_squared_error')) \n",
    "print(\"\\nCross Value Scores with neg_median_absolute_error scoring: \",cross_val_score(clf3, XFinal, y,cv=10,scoring='neg_median_absolute_error')) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 698,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ELASTIC NET REGRESSION\n",
      "----------------------\n",
      "Model Score :  0.591931712851\n",
      "\n",
      "Coefficients of features\n",
      "-------------------------\n",
      "Pro Speed  : 0.573845882333\n",
      "HDD  : 0.445939617674\n",
      "RAM  : 38.7135392104\n",
      "Screen Size  : 0.0\n",
      "Weight  : 1.49853542663\n",
      "Ratings  : 0.0200785670263\n",
      "OS=Chrome OS  : -0.0\n",
      "OS=Mac OS  : 0.0\n",
      "OS=Windows  : 0.0\n",
      "OS=Windows 10  : 0.0\n",
      "OS=Windows 7  : -0.0\n",
      "OS=Windows 8.1  : 0.0\n",
      "OS=Windows7  : 0.0\n",
      "Touch Screen=No  : -0.0\n",
      "Touch Screen=Yes  : 0.0\n",
      "\n",
      "Cross Value Scores:  [ 0.09394082  0.0734485   0.38528016  0.45261087  0.66428129  0.55338333\n",
      "  0.56822356  0.72751101  0.58185898  0.62169276]\n",
      "\n",
      "Cross Value Scores with r2 scoring:  [ 0.09394082  0.0734485   0.38528016  0.45261087  0.66428129  0.55338333\n",
      "  0.56822356  0.72751101  0.58185898  0.62169276]\n",
      "\n",
      "Cross Value Scores with neg_mean_absolute_error scoring:  [-362.71782385 -527.40878206 -370.34406824 -398.45945545 -320.08723464\n",
      " -415.06861397 -407.26972256 -436.54210385 -437.52469106 -341.24809678]\n",
      "\n",
      "Cross Value Scores with neg_mean_squared_error scoring:  [-208504.45153624 -440905.34442491 -188899.60530016 -272890.40422893\n",
      " -153330.51062294 -267161.38563098 -342814.93270601 -340332.60568015\n",
      " -356539.34462661 -170872.33398419]\n",
      "\n",
      "Cross Value Scores with neg_median_absolute_error scoring:  [-362.28615046 -449.72673008 -319.88612253 -340.28915657 -277.68126218\n",
      " -362.90741915 -309.15670903 -350.94479847 -305.00845263 -374.88509441]\n"
     ]
    }
   ],
   "source": [
    "print('ELASTIC NET REGRESSION')\n",
    "print('----------------------')\n",
    "clf4 = linear_model.ElasticNet(alpha=80)\n",
    "clf4.fit(x_train,y_train)\n",
    "predicted4 = clf4.predict(x_test)\n",
    "print(\"Model Score : \",clf4.score(x_test,y_test))\n",
    "print(\"\\nCoefficients of features\")\n",
    "print(\"-------------------------\")\n",
    "for i in range (15): \n",
    "    print(XFinal.columns[i],\" :\",clf4.coef_[i])\n",
    "    \n",
    "print(\"\\nCross Value Scores: \",cross_val_score(clf4, XFinal, y,cv=10)) \n",
    "print(\"\\nCross Value Scores with r2 scoring: \",cross_val_score(clf4, XFinal, y,cv=10,scoring='r2')) \n",
    "print(\"\\nCross Value Scores with neg_mean_absolute_error scoring: \",cross_val_score(clf4, XFinal, y,cv=10,scoring='neg_mean_absolute_error')) \n",
    "print(\"\\nCross Value Scores with neg_mean_squared_error scoring: \",cross_val_score(clf4, XFinal, y,cv=10,scoring='neg_mean_squared_error')) \n",
    "print(\"\\nCross Value Scores with neg_median_absolute_error scoring: \",cross_val_score(clf4, XFinal, y,cv=10,scoring='neg_median_absolute_error')) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 699,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ORTHOGONAL MATCHING PURSUIT REGRESSION\n",
      "--------------------------------------\n",
      "Model Score :  0.615877501944\n",
      "\n",
      "Coefficients of features\n",
      "-------------------------\n",
      "Pro Speed  : 0.0\n",
      "HDD  : 0.0\n",
      "RAM  : 82.1872525395\n",
      "Screen Size  : 0.0\n",
      "Weight  : 0.0\n",
      "Ratings  : 0.0\n",
      "OS=Chrome OS  : 0.0\n",
      "OS=Mac OS  : 0.0\n",
      "OS=Windows  : 0.0\n",
      "OS=Windows 10  : 0.0\n",
      "OS=Windows 7  : 0.0\n",
      "OS=Windows 8.1  : 0.0\n",
      "OS=Windows7  : 0.0\n",
      "Touch Screen=No  : 0.0\n",
      "Touch Screen=Yes  : 0.0\n",
      "\n",
      "Cross Value Scores:  [ 0.51407439  0.27220668  0.53731342  0.5678292   0.57599965  0.55155175\n",
      "  0.57493289  0.77864454  0.67606498  0.64580487]\n",
      "\n",
      "Cross Value Scores with r2 scoring:  [ 0.51407439  0.27220668  0.53731342  0.5678292   0.57599965  0.55155175\n",
      "  0.57493289  0.77864454  0.67606498  0.64580487]\n",
      "\n",
      "Cross Value Scores with neg_mean_absolute_error scoring:  [-256.92984674 -435.38892661 -301.6276094  -331.5533416  -319.46633541\n",
      " -374.85845116 -406.9284994  -375.36877498 -371.7799137  -317.12629009]\n",
      "\n",
      "Cross Value Scores with neg_mean_squared_error scoring:  [-111822.33422772 -346325.01642492 -142180.72312471 -215450.50324434\n",
      " -193650.78095305 -268257.01655349 -337487.96892974 -276467.97758169\n",
      " -276212.03056626 -159981.47264323]\n",
      "\n",
      "Cross Value Scores with neg_median_absolute_error scoring:  [-178.10626087 -252.26525063 -253.27019559 -260.24013101 -242.44091087\n",
      " -262.40899092 -271.62046889 -244.75470781 -234.12272114 -264.07215016]\n"
     ]
    }
   ],
   "source": [
    "print('ORTHOGONAL MATCHING PURSUIT REGRESSION')\n",
    "print('--------------------------------------')\n",
    "clf6 = linear_model.OrthogonalMatchingPursuit()\n",
    "clf6.fit(x_train,y_train)\n",
    "predicted6 = clf6.predict(x_test)\n",
    "print(\"Model Score : \",clf6.score(x_test,y_test))\n",
    "print(\"\\nCoefficients of features\")\n",
    "print(\"-------------------------\")\n",
    "for i in range (15): \n",
    "    print(XFinal.columns[i],\" :\",clf6.coef_[i])\n",
    "    \n",
    "print(\"\\nCross Value Scores: \",cross_val_score(clf6, XFinal, y,cv=10)) \n",
    "print(\"\\nCross Value Scores with r2 scoring: \",cross_val_score(clf6, XFinal, y,cv=10,scoring='r2')) \n",
    "print(\"\\nCross Value Scores with neg_mean_absolute_error scoring: \",cross_val_score(clf6, XFinal, y,cv=10,scoring='neg_mean_absolute_error')) \n",
    "print(\"\\nCross Value Scores with neg_mean_squared_error scoring: \",cross_val_score(clf6, XFinal, y,cv=10,scoring='neg_mean_squared_error')) \n",
    "print(\"\\nCross Value Scores with neg_median_absolute_error scoring: \",cross_val_score(clf6, XFinal, y,cv=10,scoring='neg_median_absolute_error')) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 701,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x107caf60>"
      ]
     },
     "execution_count": 701,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAbgAAAFHCAYAAADTDll/AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAGvJJREFUeJzt3XuUZWV55/Hvj0YDouB4GVAQULygiAgZUEeDZUhiOzFA\nokE6ickYM9OjwWXGS3CMGTprqaiT0YwyGoksk0kyEqOOoAbFEE7whrTclW7AmBBugTF44Tppm2f+\n2Lu6D0VVdVV37bq89f2sdVafy3v2ec7TVfU779777J2qQpKk1uy21AVIkjQEA06S1CQDTpLUJANO\nktQkA06S1CQDTpLUpMEDLsnaJJuTXJfk1Gkef1OSy5NcluTqJD9K8sih65IktS1Dfg8uyW7AdcBx\nwC3ARuDkqto8w/iXAr9VVT81WFGSpFVh6BncMcD1VXVDVW0BzgZOmGX8OuBjA9ckSVoFhg64/YEb\nx27f1N/3IEn2BNYCnxy4JknSKrCcdjL5OeDLVfX9pS5EkrTy7T7w8m8GDhy7fUB/33ROZpbVk0k8\naKYk6UGqKtPdP/QMbiPw5CQHJXkoXYidO3VQkn2AFwLnzLawqlrVl9NOO23Ja1jqiz2wD/bAHoxf\nZjPoDK6qtiY5BTifLkzPqqpNSdZ3D9eZ/dATgS9U1b1D1iNJWkWWOn3nkdK12p122mlLXcKSW849\n2Hffgwpo6rLvvget+j7Yg53rwWIBqmbIjaG3wWkBTUxMLHUJS2459+C2226g+3uwGEbAxOCvcttt\n027a2MFzFqsPI+zBiOXag+Vg0C96L6QktVJq1eqUhMULuMWSHW7neNAzmuuDPdiZHiyWJNQS7WQi\nSdKSMOAkSU0y4CRJTTLgJElNMuAkSU0y4CRJTTLgJElNMuAkSU0y4CRJTTLgJElNMuAkSU0y4CRJ\nTTLgJElNMuAkSU0y4CRJTTLgJElNMuC0IPbb72CSNHPZb7+Dl7qlknaRZ/TWgvAMxi32AOwD2APw\njN6SJC0jBpwkqUkGnCSpSQacJKlJBpwkqUkGnCSpSQacJKlJBpwkqUkGnCSpSQbcAvAwVZK0/Hio\nrgXgYXnsAbTYA7APYA/AQ3XN/OJrk2xOcl2SU2cYM5Hk8iTfTHLh0DVJkto36AwuyW7AdcBxwC3A\nRuDkqto8NmYf4KvAz1TVzUkeU1XfnWZZzuAWjZ9Y7cEk+2APwBnc9I4Brq+qG6pqC3A2cMKUMb8E\nfLKqbgaYLtwkSZqvoQNuf+DGsds39feNeyrwqCQXJtmY5JUD1yRJWgV2X+oC6Go4CvhJYC/ga0m+\nVlXfXtqyJEkr2dABdzNw4NjtA/r7xt0EfLeq7gPuS3IRcATwoIDbsGHDtusTExNMTEwscLmSpOVs\nNBoxGo3mNHbonUzWANfS7WRyK3AJsK6qNo2NORT4ALAW+DHg68ArquqaKctyJ5NF40Z1ezDJPtgD\nWKk7mQw6g6uqrUlOAc6n2953VlVtSrK+e7jOrKrNSb4AXAVsBc6cGm6SJM2XX/ReAH5aswfQYg/A\nPoA9gJU6g/NQXZKkJhlwkqQmGXCSpCYZcJKkJhlwkqQmGXCSpCYZcJKkJhlwkqQmGXCSpCYZcJKk\nJhlwkqQmGXCSpCYZcJKkJhlwkqQmGXCSpCYZcJKkJhlwkqQmGXCSpCYZcJKkJhlwkqQmGXCSpCYZ\ncJKkJhlwkqQmGXCSpCYZcJKkJhlwkqQmGXCSpCYZcJKkJhlwkqQmGXCSpCYZcJKkJg0ecEnWJtmc\n5Lokp07z+AuTfD/JZf3lbUPXJElq3+5DLjzJbsAZwHHALcDGJOdU1eYpQy+qquOHrEWStLoMPYM7\nBri+qm6oqi3A2cAJ04zLwHVIklaZoQNuf+DGsds39fdN9bwkVyT5XJJnDFyTJGkVGHQV5RxdChxY\nVfckeQnwaeCpS1yTJGmFGzrgbgYOHLt9QH/fNlV119j185J8MMmjquqOqQvbsGHDtusTExNMTEws\ndL2SpGVsNBoxGo3mNDZVNVghSdYA19LtZHIrcAmwrqo2jY3Zt6pu668fA3y8qg6eZlk1ZK27Igmw\nPGvbOWG+vbYHLfYA7APYA9iZHiyWJFTVtPtxDDqDq6qtSU4Bzqfb3ndWVW1Ksr57uM4EXp7kNcAW\n4F7gFUPWJElaHQadwS0kZ3CLyU+s9mCSfbAHsFJncB7JRJLUJANOktQkA06S1CQDTpLUJANOktQk\nA06S1CQDTpLUJANOktQkA06S1CQDTpLUJANOktQkA06S1CQDTpLUJANOktQkA06S1CQDTpLUJANO\nktQkA06S1CQDTpLUJANOktQkA06S1CQDTpLUJANOktQkA06S1CQDTpLUJANOktQkA06S1CQDTpLU\nJANOktQkA06S1CQDTpLUpMEDLsnaJJuTXJfk1FnGHZ1kS5JfGLomSVL7Bg24JLsBZwAvBg4D1iU5\ndIZx7wK+MGQ9kqTVY+gZ3DHA9VV1Q1VtAc4GTphm3OuATwC3D1yPJGmVGDrg9gduHLt9U3/fNkke\nD5xYVR8CMnA9kqRVYvcdDUiyL/BO4PFV9ZIkzwCeV1VnLVANfwCMb5ubMeQ2bNiw7frExAQTExML\nVIIkaSUYjUaMRqM5jU1VzT4gOQ/4KPA7VXVEkt2By6vq8B0uPHkusKGq1va33wJUVb17bMx3Jq8C\njwHuBv5jVZ07ZVm1o1qXShJgeda2c8J8e20PWuwB2AewB7AzPVgsSaiqaSdGc1lF+Ziq+jhwP0BV\n/QjYOsfX3gg8OclBSR4KnAw8ILiq6kn95Yl02+FeOzXcJEmarx2uogTuTvJo+o8j/azsB3NZeFVt\nTXIKcD5dmJ5VVZuSrO8erjOnPmXupUuSNLO5rKI8CvgA8Ezgm8BjgZdX1VXDl/eAOlxFuWhcJWMP\nJtkHewArdRXlrDO4/vtpewAvBJ5Gt53s2n6Xf0mSlq25zOAur6ojF6me2epwBrdo/MRqDybZB3sA\nK3UGN5edTC5I8rJ0/2OSJK0Ic5nB3QnsRbfn5L10qymrqvYevrwH1OEMbtH4idUeTLIP9gBW6gxu\nh3tRVtUjFr4kSZKGNZevCZDkeODY/uaoqj47XEmSJO26HW6DS/Iu4PXANf3l9UlOH7owSZJ2xVy2\nwV0FPLuq7u9vr6E7VNezFqG+8TrcBrdo3OZgDybZB3sAK3Ub3FzPJvDIsev77HpJkiQNay7b4E4H\nLk9yId0elMcCbxm0KkmSdtEOV1ECJHkccHR/85Kq+qdBq5q+BldRLhpXydiDSfbBHkCzqyiT/Dxw\nT1Wd2x/l/74kJy50kZIkLaS57GRyRVU9e8p9i374Lmdwi8lPrPZgkn2wB9DsDG6GMXP6/pwkSUtl\nLgH3jSTvTXJIf3kfcOnQhUmStCvmEnCvA/4F+Iv+ch/wm0MWJUnSrprTXpTbBndf8t6rqn44XEkz\nvrbb4BaN2xzswST7YA+g2W1wSf53kr2T7AVcDVyT5M0LXaQkSQtpLqson9HP2E4EzgOeCLxy0Kok\nSdpFcwm4hyR5CF3AnVtVW2hr7i1JatBcAu7DwD/QnfT0oiQHAYu+DU6SpPmY104mAOm2nq6pqh8N\nU9KMr+tOJovGjer2YJJ9sAewUncymfcXtvuUWdRwkyRpvuZ6uhxJklYUA06S1KRZA67//tsh09y/\nqGfzliRpvmYMuCQnAZuBTyb5VpKjxx7+46ELkyRpV8w2g3sr8OP9qXJeBfxpf2446M7sLUnSsjXb\nXpRrqupWgKq6JMmLgM8meQJt7f8qSWrQbDO4O8e3v/VhNwGcABw2cF2SJO2S2WZwr2FKAFbVnUnW\nAicNWpUkSbtoxhlcVV1ZVddP89DW+bxAkrVJNie5Lsmp0zx+fJIrk1ye5JIkz5/P8iVJms6Mh+pK\nsjfdiU33B84FvgicArwRuLKqTtjhwpPdgOuA44BbgI3AyVW1eWzMw6rqnv764cDHq+rp0yzLQ3Ut\nGg9NZA8m2Qd7AC0equtPge8BXwN+g26vygAnVtUVc3ztY4Drq+qGvpCz6bbhbQu4yXDrPRy4f47L\nliRpRrMF3JOq6nCAJB8BbgUOrKr75rH8/YEbx27fRBd6D5DkROB04LHAz85j+ZIkTWu2gNsyeaWq\ntia5aZ7hNmdV9Wng00leALwd+Onpxm3YsGHb9YmJCSYmJoYoR5K0TI1GI0aj0ZzGzrYNbitw9+RN\nYE/gnv56VdXeO1x48lxgQ1Wt7W+/pX/uu2d5zt8BR1fVHVPudxvconGbgz2YZB/sATS3Da6q1izA\na28EntyfJPVW4GRg3ZTiDqmqv+uvHwU8dGq4SZI0X/M+H9x89Ks2TwHOp/tKwllVtSnJ+u7hOhN4\nWZJfBf4FuBe/YydJWgDzPqP3UnEV5WJylYw9mGQf7AGs1FWUng9OktQkA06S1CQDTpLUJANOktQk\nA06S1CQDTpLUJANOktQkA06S1CQDTpLUJANOktQkA06S1CQDTpLUJANOktQkA06S1CQDTpLUJANO\nktQkA06S1CQDTpLUJANOktQkA06S1CQDTpLUJANOktQkA06S1CQDTpLUJANOktQkA06S1CQDTpLU\nJANOktQkA06S1CQDTpLUpMEDLsnaJJuTXJfk1Gke/6UkV/aXLyc5fOiaJEntGzTgkuwGnAG8GDgM\nWJfk0CnDvgMcW1VHAG8H/mjImiRJq8PQM7hjgOur6oaq2gKcDZwwPqCqLq6qH/Q3Lwb2H7gmSdIq\nMHTA7Q/cOHb7JmYPsN8Azhu0IknSqrD7UhcwKcmLgFcBL1jqWiRJK9/QAXczcODY7QP6+x4gybOA\nM4G1VfW9mRa2YcOGbdcnJiaYmJhYqDolSSvAaDRiNBrNaWyqarBCkqwBrgWOA24FLgHWVdWmsTEH\nAhcAr6yqi2dZVg1Z665IAizP2nZOmG+v7UGLPQD7APYAdqYHiyUJVZXpHht0BldVW5OcApxPt73v\nrKralGR993CdCfwu8Cjgg+l+KrZU1TFD1iVJat+gM7iF5AxuMfmJ1R5Msg/2AFbqDM4jmUiSmmTA\nSZKaZMBJkppkwEmSmmTASZKaZMBJkppkwEmSmmTASZKaZMBJkppkwEmSmmTASZKaZMBJkppkwEmS\nmmTASZKaZMBJkppkwEmSmmTASZKaZMBJkppkwEmSmmTASZKaZMBJkppkwEmSmmTASZKaZMBJkppk\nwEmSmmTASZKaZMBJkppkwEmSmmTASZKaZMBJkppkwEmSmjR4wCVZm2RzkuuSnDrN409L8tUk9yV5\nw9D1SJJWh92HXHiS3YAzgOOAW4CNSc6pqs1jw/4ZeB1w4pC1SJJWl6FncMcA11fVDVW1BTgbOGF8\nQFV9t6ouBX40cC2SpFVk6IDbH7hx7PZN/X2SJA3KnUwkSU0adBsccDNw4NjtA/r7dsqGDRu2XZ+Y\nmGBiYmJnFyVJWoFGoxGj0WhOY1NVgxWSZA1wLd1OJrcClwDrqmrTNGNPA+6qqv8+w7JqyFp3RRJg\neda2c8J8e20PWuwB2AewB7AzPVgsSaiqTPfYoDO4qtqa5BTgfLrVoWdV1aYk67uH68wk+wLfAB4B\n3J/k9cAzququIWuTJLVt0BncQnIGt5j8xGoPJtkHewArdQbnTiaSpCYZcJKkJhlwkqQmGXCSpCYZ\ncJKkJhlwkqQmGXCSpCYZcJKkJhlwkqQmGXCSpCYZcJKkJhlwkqQmGXCSpCYZcJKkJhlwkqQmGXCS\npCYZcJKkJhlwkqQmGXCSpCYZcJKkJhlwkqQmGXCSpCYZcJKkJhlwkqQmGXCSpCYZcJKkJhlwkqQm\nGXCSpCYZcJKkJhlwkqQmGXCSpCYNHnBJ1ibZnOS6JKfOMOb9Sa5PckWSZw9dkySpfYMGXJLdgDOA\nFwOHAeuSHDplzEuAQ6rqKcB64A+HrGllGy11AcvAaKkLWCZGS13AMjBa6gKWgdFSF7CsDT2DOwa4\nvqpuqKotwNnACVPGnAD8L4Cq+jqwT5J9B65rhRotdQHLwGipC1gmRktdwDIwWuoCloHRUhewrA0d\ncPsDN47dvqm/b7YxN08zRpKkeXEnE0lSk3YfePk3AweO3T6gv2/qmCfsYAwASRa0uIW1WLX93qK8\nys712h4sXg/APoA9gOXdg6U1dMBtBJ6c5CDgVuBkYN2UMecCvwn8RZLnAt+vqtumLqiqVl53JUlL\nZtCAq6qtSU4BzqdbHXpWVW1Ksr57uM6sqr9K8u+SfBu4G3jVkDVJklaHVNVS1yBJ0oJzJ5NlIsn+\nST7dfyH++iTvS7J7khcmuT/Jr4+NPaK/7w397Y8m+U6Sy5J8I8lzlvB9bO3ruLz/97f7+y9MctRO\nLO+E8e9OJvm9JD85y/jJfv3s2H2fSXLsDl7n15LsN9/6dtVYv65Ock6Svfv7H5fk4zM8Z6d6uZwl\nuXOpa1gq0733JOuT/MpS1NMSA275+BTwqap6KvBU4OHAO/vHvgmcNDZ2HXDFlOe/qaqOAv4LcObA\ntc7m7qo6qqqO7P99zy4u70S6gwQAUFWnVdXf7OA5NwG/M8/X+fcszddTJvt1OPA9uu3RVNWtVXXS\n7E9tympelfSg915VH66qPxvyRbMS9xqZJwNuGehnJPdW1eQX3gt4A/DrwJ7ADcAeSR7bP2UtcN4M\ni7sIOGTYime1w1+aJB9Mckk/azlt7P53JflWf8i29yR5HnA88J5+lvPEfrb6C/34o5N8pR9/cZK9\n+kVdCfwgyXHTvPZRSUZJNiY5L8l+SV4G/Bvgz/rX+bGFaMRO+Bp9yCY5KMnV/fU9knys782ngD0m\nn5Dk1Umu7d//mUne39//mCSfSPL1/vJvl+IN7YokL+3f16VJzp/8+U9y7NgagkuT7NX/P/5tf99V\nSZ7fj13X374qyelL+47mLslpY2toLux/N76e7rCHk+9tt/735Ov978B/6O/fK8lf92tzrkxyfH//\nQf3z/6T/2Tpgyd7gIhl6L0rNzWHApeN3VNWdSf4ReHJ/1yeAk5Jc3o/9fzMs63jg6qEKnYM9k1xG\nF3QFnF5VfzllzFur6vvpDuV2QZJPArcAJ1bVoQBJ9q6qHyY5F/hMVX2qv5/+34fQHRnnF6vqsiQP\nB+7tl1/AO4C3AxdMvmiS3YEPAMdX1T8nOQl4R1W9Ot3OUG+oqssXviWzSl/bGuA44CNjj01+sn8N\n3UzvsCSHA5f1z3kc8Dbg2cBdwIVsn9n/D+C9VfXVJE8AvgA8Y+D3stC+VFXPhS7Igd8G3gy8CXht\nVX0tycPofhfWA5+vqtP7mcnD+v68CzgS+D7wxSTHV9W5S/FmdtGaqnpOukMbbgB+Gng13V7nz0ny\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10a6a7f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rs = 1\n",
    "ests = [ linear_model.LinearRegression(), linear_model.Ridge(),\n",
    "        linear_model.Lasso(), linear_model.ElasticNet(), linear_model.OrthogonalMatchingPursuit() ]\n",
    "ests_labels = np.array(['Linear', 'Ridge', 'Lasso', 'ElasticNet', 'OMP'])\n",
    "errvals = np.array([])\n",
    "\n",
    "\n",
    "for e in ests:\n",
    "    e.fit(x_train, y_train)\n",
    "    this_err = metrics.r2_score(y_test, e.predict(x_test))\n",
    "    #print \"got error %0.2f\" % this_err\n",
    "    errvals = np.append(errvals, this_err)\n",
    "\n",
    "pos = np.arange(errvals.shape[0])\n",
    "srt = np.argsort(errvals)\n",
    "plt.figure(figsize=(7,5))\n",
    "plt.bar(pos, errvals[srt], align='center')\n",
    "plt.xticks(pos, ests_labels[srt])\n",
    "plt.xlabel('Estimator')\n",
    "plt.ylabel('R2 score')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
